================================================
== Gaussian
================================================
Gaussian variable = average of some number of white noise variables.
the more uniform noise samples are averaged, the tighter the standard deviation of Gaussian white noise becomes.


================================================
== 3D terrain generation:
================================================
make a 3D generator that builds the world just like the 2D terrain generator did in GridVenture.
instead of using lines, use planes.

the generator will build one big plane. then it will break it up into smaller planes. then into smaller planes.

	•	have with one empty two-dimensional array of floating point (elevation) values.
	
	•	generate a plane to fit in this space.
		specify the height at the center of the plane.
		specify the slope of the plane.
		
	•	break this plane up into four smaller planes
	
	•	generate center heights for each of these smaller planes.
		The center height will be calculated by the slope of the parent plane.
		However, the height will be subject to Gaussian noise.
		Then the slope of this smaller plane will be generated by the two known points
		(the center of the bigger plane and the center of the smaller plane).
	
	• 	wash, rinse, repeat.

the planes will be centered in the middles of blocks.
consequently, it will help a lot if the length and with of blocks are the same and powers of 3.

everything needs to be symmetrical down to the finest precision (a single floating point element in the 2D array of elevation values in any given block).
therefore, blocks will be one of the following:

3x3,
9x9,
27x27,
81x81,
243x243,
729x729,
2187x2187,
etc...

243x243 looks the most promising because 243 elements_wide * 243 elements_tall * 4 bytes = 236196 bytes  =~ (230 kB)
The maximum amount of consecutive data in an array is 2 MB, I think.
So this value should be within the acceptable range.
so each block will be 230 kB with a 243x243 2D array of elevation values.


================================================
== rain filter:
================================================
add a rain filter to the game. It will simulate rain and erosion on a landscape.
there would be simulated rain particles that would shower a landscape.
each rain particle would fall down the steepest slope.
as it falls down slopes, it would take away some of the land that it was just on and place it on the land that it is flowing to (eroding the land, bringing more land downhill).
this could produce some very interesting patterns.